✔ Add success messages @high @done(19-03-18 23:47)
    ✔ Send messages on 200's @done(19-03-18 23:47)
✔ Add error handling @high @done(19-03-18 23:47)
    ✔ When creating a notification @done(19-03-18 23:47)
    ✔ When editing a notification @done(19-03-18 23:47)
    ✔ When deleting a notification @done(19-03-18 23:47)
✔ Add validation @done(19-03-18 22:14)
    sendEditNotificationEmail
    sendDeleteNotificationEmail
    ✔ Make sure the emails exist before doing anything @done(19-03-18 22:14)
        Test what happens with the current logic. Mongo may return an error which is enough
        Solution: Just try to add the token to the email address. If it doesnt exist, it returns 0.
✘ Figure out the differences between mongoose.connection.dropDatabase() and mongoose.connection.db.dropDatabase(); @low @cancelled(19-03-18 22:00)
    In setting up tests
    This works:
        await mongoose.connection.dropDatabase();
    This does NOT work:
        await mongoose.connection.db.dropDatabase();
✔ Fix email templates @done(19-03-18 21:58)
    ✔ Welcome @done(19-03-18 21:58)
    ✔ Edit @done(19-03-18 21:58)
    ✔ Delete @done(19-03-18 21:58)
✔ Fix tests @done(19-03-18 21:29)
✔ Update routes @done(19-03-18 21:27)
✔ Change HTTP methods on edit and delete routes @done(19-03-18 21:27)
✔ Change edit route to PATCH @done(19-03-18 21:27)
✔ Change delete route to PATCH @done(19-03-18 21:27)
✔ Update tests @done(19-03-18 21:27)
✔ Update http success code on edited/deleted notification @done(19-03-18 21:29)
Both 200 and 204 codes are ok. Keeping 200.
✔ Change form types to enum @low @done(19-03-18 16:24)
✔ Consider changing the actionmenu to return a NAV and not a DIV @done(19-03-18 16:06)
✔ Hide the button of the current page in the actionmenu @done(19-03-18 01:55)
✔ Remove any's @done(19-03-18 16:20)
✔ Add types to params @done(19-03-18 16:20)
✔ Update controllers @done(19-03-18 15:29)
        ✔ Check TODO's on routes @done(19-03-18 15:20)
        ✔ Remove res.redirects @done(19-03-18 15:20)
✔ Add pages for confirming update/delete notification @done(19-03-18 16:20)
    This should make a request on componentDidMount or something, and then return a success/error message
    Ended up using React Hooks
✔ Simplify pages @low @done(19-03-18 15:21)
        There's a lot of duplicated code
        Move the common stuff (title, github corner) to App and render children there
        Pass the components as the children
✔ Move routes from server to client @done(19-03-18 15:21)
    It doesn't make sense to have the edit/delete get requests, since they are on the api and not on the client side
    Run validation on the url itself, assume the email and token is valid, and then validate server side

    To use the form itself, the router needs to pass in props for formType
    Also, the formtype needs to be set (in state) before mounting the component
✔ Fix prettier not working with ts @done(19-02-11 19:32)
    I'm dumb and disabled 'format on save'
✔ Add logger @done(19-02-11 19:26)
    ✔ Log stuff @done(19-02-11 19:26)
✔ Add script (cron) @done(19-02-11 19:20)
    ✔ Run after drafts @done(19-02-11 19:20)
        ✔ Allow a few hours for the rss to update @done(19-02-11 19:20)
    ✔ Get email addresses that have a minPrize lower than the current prize @done(19-02-11 19:20)
    ✔ Send an email to everyone @done(19-02-11 19:20)
        ✔ Make a template in Sendgrid @done(19-02-11 19:20)
✔ Create interface for email variables @done(19-02-11 19:01)
    variables: any
✘ Move res.locals to req.locals ? @cancelled(19-02-11 18:48)
✔ Replace any's @done(19-02-11 19:19)
✔ Add min-max ranges to the html input for minPrize @done(19-01-26 01:54)
✔ Add model @done(18-11-06 11:47)
  Schema:
    - Email (user email)
    - MinPrize (integer)
    - Token { value: string, expiresAt: date }
✔ Move to constants @done(18-11-17 20:11)
  ✔ Error messages @done(18-11-17 20:01)
  ✘ Success messages @cancelled(18-11-17 20:11)
  ✔ min/max prize values @done(18-11-17 20:07)
      currently .min(15).max(300)
  ✔ token expiration duration @done(18-11-17 20:11)
      currently 1 day dt.setDate(dt.getDate() + 1);
  ✔ After setting thiu up, compare the api responses with the constants @done(18-11-17 20:11)
      Basically, uncomment the lines that look like
          expect(res.body.error).toBe(THE_CONSTANT);
✔ Create interface for notificationObj @done(18-11-11 00:23)
✔ Add travisci @done(18-11-17 20:01)
✔ Show coverage on github @done(18-11-17 19:50)
✔ Show build status on github @done(18-11-17 19:50)
✔ Add env vars to Travis @done(18-11-17 19:50)
    Tests are failing because they are undefined
✔ Test Joi validation errors @done(18-11-11 00:23)
  I may need to do some custom validation messages if Joi's arent that great
  I ended up using my own error messages.
✔ Add route @done(18-11-06 11:47)
  ✔ POST / @done(18-11-06 11:47)
      Create new notification
      ✔ Add controller @done(18-11-08 00:37)
          ✔ createNotification @done(18-11-08 00:37)
              ✔ Should receive email AND minPrize @done(18-11-06 11:47)
                  ✔ Add validation @done(18-11-06 11:47)
              ✔ Should check if the email exists @done(18-11-06 12:31)
                  Try to insert and see what happens
              ✔ Should save that data in the db @done(18-11-06 12:31)
              ✔ Should respond with 201/400/500 @done(18-11-06 12:31)
              ✔ Should send an email with welcome message @done(18-11-08 00:37)
                  ✔ Setup email template in Sendgrid @done(18-11-08 00:37)
  ✔ POST /editnotification @done(18-11-17 22:37)
      This should send an email with a token
      ✔ Add controller @done(18-11-17 22:37)
          ✔ sendEditNotificationEmail @done(18-11-17 22:37)
              ✔ Should receive email @done(18-11-08 00:52)
              ✔ Should generate a new token @done(18-11-08 00:52)
                  ✔ Figure out how to add the token to the db @done(18-11-11 00:29)
                      Needs two fields: token and createdAt or expiresAt
                      Can be added to the current collection or a new one
                      Figure out if mongo has some feature to autodelete a document based on a timestamp.
                      This would make it easier to delete an unused and invalid token.

                      Ended up adding a token field that is an object with 2 keys (value, expiresAt)
                      Expired unused tokens must be deleted using a cronjob or something like that
              ✔ Should send email with link for GET /editnotification/:token @done(18-11-17 22:37)
  ✔ POST /deletenotification @done(18-11-17 22:37)
      This should send an email with a token
      ✔ Add controller @done(18-11-17 22:37)
          ✔ sendDeleteNotificationEmail @done(18-11-17 22:37)
              ✔ Should receive email @done(18-11-11 01:05)
              ✔ Should generate a new token @done(18-11-11 01:06)
              ✔ Should send email with link for GET /deletenotification/:token @done(18-11-17 22:37)
  ✔ PATCH /editnotification/:token/:minPrize @done(18-11-11 01:10)
      Edit minPrize
      ✔ Add controller @done(18-11-11 01:06)
          ✔ editNotification @done(18-11-11 01:06)
              ✔ Should receive token and minPrize @done(18-11-11 00:30)
                  ✔ Add validation @done(18-11-11 00:30)
              ✔ Should update db data @done(18-11-11 01:06)
              ✔ Should respond with 200/400 @done(18-11-11 01:06)
  ✔ DELETE /deletenotification/:token @done(18-11-11 01:07)
      Delete notification
      ✔ Add controller @done(18-11-11 01:07)
          ✔ deleteNotification @done(18-11-11 01:07)
              ✔ Should receive token @done(18-11-11 01:07)
                  ✔ Add validation @done(18-11-11 01:07)
              ✔ Should update db data (remove notification) @done(18-11-11 01:07)
              ✔ Should respond with 200/400 @done(18-11-11 01:07)